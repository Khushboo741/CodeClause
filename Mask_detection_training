import cv2
import cv2
img=cv2.imread( r'C:\Users\jaink\OneDrive\Documents\Image.jpg')
img.shape
img
import matplotlib.pyplot as plt
plt.imshow(img)
v2.imshow('result',img)
while True:
    cv2.imshow('result',img)
    if cv2.waitKey(2)==27:
        break
cv2.destroyAllWindows()
import cv2

# Load the image
image_path = r'C:\Users\jaink\OneDrive\Documents\Image.jpg'  # Replace with the path to your image
img = cv2.imread(image_path)

# Convert the image to grayscale
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Display the grayscale image
cv2.imshow('Black and White Image', gray_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
import  cv2
haar_data=cv2.CascadeClassifier('data.xml')
haar_data.detectMultiScale(img)
while True:
    faces = haar_data.detectMultiScale(img)
    for x, y, w, h in faces:
        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 255), 4)

    cv2.imshow('result', img)
    if cv2.waitKey(2) == 27:
        break

cv2.destroyAllWindows()
import cv2 as cv

# Load the Haar cascade
face_cascade = cv.CascadeClassifier('data.xml')

# Read the image
img = cv.imread(r'C:\Users\jaink\OneDrive\Documents\Image.jpg')
# Replace 'your_image_path.jpg' with the path to your image

# Convert the image to grayscale
gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

# Detect faces with multi-scale
faces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.3, minNeighbors=5)
for x, y, w, h in faces:
    cv.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 4)

# Display the result image
cv.imshow('result', img)

# Wait for a key press (0 means to wait indefinitely until a key is pressed)
cv.waitKey(0)

# Close the OpenCV window
cv.destroyAllWindows()
import cv2
capture=cv2.VideoCapture(0)
while True:
    flag,img=capture.read()
    if flag:
        faces=haar_data.detectMultiScale(img)
        for x,y,w,h in faces:
            cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,255),4)
        cv2.imshow('result',img)
        if cv2.waitKey(2)==27:
            break
capture.release()
cv2.destroyAllWindows()
import numpy as np
x=np.array([3,2,54,6])
x
x[0:2]
x=np.array([[3,4,54,67,8,8],[1,2,2,4,5,7],[4,5,3,5,6,7],[1,2,3,34,6,8]])
x
x[0]
x[:,1:4]
capture=cv2.VideoCapture('WithMask.mp4')#here we are using video path but we can also use live camera by cv2.VideoCapture(0)
data=[]#here we have to use live camera or recorded videos of with mask and without mask
while True:
    flag,img=capture.read()
    if flag:
        faces=haar_data.detectMultiScale(img)
        for x,y,w,h in faces:
            cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,255),4)
            face=img[y:y+h,x:x+w,:]
            face=cv2.resize(face,(50,50))
            print(len(data))
            if len(data)<400:
                data.append(face)
        cv2.imshow('result',img)
        if cv2.waitKey(2)==27 or len(data)>=200:
            break
capture.release()
cv2.destroyAllWindows()
np.save('without_mask.npy',data)
np.save('with_mask.npy',data)
plt.imshow(data[0])
